// src/components/navigation/TabNavigator.js
import React from 'react';
import {
  View,
  TouchableOpacity,
  Text,
  StyleSheet,
  Platform,
  SafeAreaView,
} from 'react-native';
import { useAppTheme } from '../../hooks/useTheme';

const TabNavigator = ({
  // –û—Å–Ω–æ–≤–Ω—ñ –ø—Ä–æ–ø—Å–∏
  activeTab,
  onTabPress,
  
  // –¢–∞–±–∏
  tabs = [
    { key: 'calendar', title: '–ö–∞–ª–µ–Ω–¥–∞—Ä', icon: null },
    { key: 'map', title: '–ö–∞—Ä—Ç–∞', icon: null },
    { key: 'add', title: '–î–æ–¥–∞—Ç–∏', icon: null },
  ],
  
  // –°—Ç–∏–ª—ñ–∑–∞—Ü—ñ—è
  style,
  tabStyle,
  activeTabStyle,
  textStyle,
  activeTextStyle,
  iconStyle,
  activeIconStyle,
  
  // Accessibility
  testID,
  accessibilityLabel,
  ...restProps
}) => {
  const { colors } = useAppTheme();

  // –†–µ–Ω–¥–µ—Ä —ñ–∫–æ–Ω–∫–∏ —Ç–∞–±—É
  const renderTabIcon = (tab, isActive) => {
    if (!tab.icon) {
      // –î–µ—Ñ–æ–ª—Ç–Ω—ñ —ñ–∫–æ–Ω–∫–∏ —É –≤–∏–≥–ª—è–¥—ñ –µ–º–æ–¥–∂—ñ (–º–æ–∂–Ω–∞ –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ñ —ñ–∫–æ–Ω–∫–∏)
      const defaultIcons = {
        calendar: 'üìÖ',
        map: 'üó∫Ô∏è',
        add: '‚ûï',
      };
      
      return (
        <Text style={[
          styles.defaultIcon,
          isActive ? activeIconStyle : iconStyle,
          { color: isActive ? colors.primary : colors.textSecondary }
        ]}>
          {defaultIcons[tab.key] || 'üîò'}
        </Text>
      );
    }
    
    // –ö–∞—Å—Ç–æ–º–Ω–∞ —ñ–∫–æ–Ω–∫–∞
    return React.cloneElement(tab.icon, {
      style: [
        tab.icon.props.style,
        styles.icon,
        isActive ? [activeIconStyle, { color: colors.primary }] : [iconStyle, { color: colors.textSecondary }]
      ],
    });
  };

  // –†–µ–Ω–¥–µ—Ä —Ç–∞–±—É
  const renderTab = (tab) => {
    const isActive = activeTab === tab.key;
    
    return (
      <TouchableOpacity
        key={tab.key}
        style={[
          styles.tab,
          tabStyle,
          isActive && [styles.activeTab, activeTabStyle],
        ]}
        onPress={() => onTabPress(tab.key)}
        accessibilityLabel={`${tab.title} —Ç–∞–±`}
        accessibilityRole="tab"
        accessibilityState={{ selected: isActive }}
        activeOpacity={0.7}
      >
        {renderTabIcon(tab, isActive)}
        <Text style={[
          styles.tabText,
          { color: colors.textSecondary },
          textStyle,
          isActive && [{ color: colors.primary }, activeTextStyle],
        ]}>
          {tab.title}
        </Text>
      </TouchableOpacity>
    );
  };

  return (
    <SafeAreaView style={[styles.container, { backgroundColor: colors.card }, style]}>
      <View
        style={[styles.tabContainer, { borderTopColor: colors.border }]}
        testID={testID}
        accessibilityLabel={accessibilityLabel || "–ù–∏–∂–Ω—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–∞ –ø–∞–Ω–µ–ª—å"}
        accessibilityRole="tablist"
        {...restProps}
      >
        {tabs.map(renderTab)}
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    ...Platform.select({
      ios: {
        shadowColor: 'rgba(0, 0, 0, 0.1)',
        shadowOffset: {
          width: 0,
          height: -2,
        },
        shadowOpacity: 0.8,
        shadowRadius: 2,
      },
      android: {
        elevation: 8,
      },
    }),
  },
  tabContainer: {
    flexDirection: 'row',
    borderTopWidth: 1,
    paddingTop: 8,
    paddingBottom: Platform.OS === 'ios' ? 20 : 8, // –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –ø–∞–¥—ñ–Ω–≥ –¥–ª—è Home Indicator –Ω–∞ iOS
  },
  tab: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 8,
    paddingHorizontal: 4,
  },
  activeTab: {
    // –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Å—Ç–∏–ª—ñ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–±—É, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
  },
  icon: {
    marginBottom: 4,
    textAlign: 'center',
  },
  defaultIcon: {
    fontSize: 20,
    marginBottom: 4,
    textAlign: 'center',
  },
  tabText: {
    fontSize: 12,
    fontWeight: '500',
    textAlign: 'center',
  },
});

export default TabNavigator;