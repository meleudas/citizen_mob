// src/services/authService.js
import api from './api';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { Platform } from 'react-native';

// –ö–ª—é—á—ñ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
const USER_DATA_KEY = 'userData';
const USER_TOKEN_KEY = 'userToken';
const REFRESH_TOKEN_KEY = 'refreshToken';
const DEVICE_INFO_KEY = 'deviceInfo';

// –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏ –¥–ª—è —Ç–∏–ø—ñ–≤ –¥–∞–Ω–∏—Ö
/**
 * @typedef {Object} User
 * @property {number} id - ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @property {string} firstName - –Ü–º'—è
 * @property {string} lastName - –ü—Ä—ñ–∑–≤–∏—â–µ
 * @property {string} email - Email
 * @property {string} [avatar] - URL –∞–≤–∞—Ç–∞—Ä–∞
 * @property {Date} [createdAt] - –î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
 * @property {Date} [updatedAt] - –î–∞—Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
 */

/**
 * @typedef {Object} AuthResponse
 * @property {boolean} success - –°—Ç–∞—Ç—É—Å —É—Å–ø—ñ—Ö—É
 * @property {User} [user] - –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @property {string} [token] - Access —Ç–æ–∫–µ–Ω
 * @property {string} [refreshToken] - Refresh —Ç–æ–∫–µ–Ω
 * @property {string} [error] - –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
 */

/**
 * @typedef {Object} LoginCredentials
 * @property {string} email - Email –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @property {string} password - –ü–∞—Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @property {boolean} [rememberMe] - –ó–∞–ø–∞–º'—è—Ç–∞—Ç–∏ –º–µ–Ω–µ
 */

/**
 * @typedef {Object} RegisterData
 * @property {string} firstName - –Ü–º'—è
 * @property {string} lastName - –ü—Ä—ñ–∑–≤–∏—â–µ
 * @property {string} email - Email
 * @property {string} password - –ü–∞—Ä–æ–ª—å
 */

class AuthService {
  constructor() {
    this.isAuthenticated = false;
    this.currentUser = null;
    this.token = null;
    this.refreshToken = null;
  }

  getDeviceInfo() {
    return {
      platform: Platform.OS,
      version: Platform.Version,
      model: Platform.constants?.Model || 'Unknown',
      manufacturer: Platform.constants?.Manufacturer || 'Unknown',
      userAgent: `ZakonosluzhbyApp/${Platform.Version} (${Platform.OS})`,
    };
  }

  async saveUserData(user, token, refreshToken) {
    try {
      console.log('üíæ [AuthService.saveUserData] –ü–æ—á–∞—Ç–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
      console.log('üíæ [AuthService.saveUserData] –í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ:', { 
        hasUser: !!user, 
        hasToken: !!token, 
        hasRefreshToken: !!refreshToken
      });

      if (!user) {
        const errorMsg = '–í—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞';
        console.error('‚ùå [AuthService.saveUserData] –ü–û–ú–ò–õ–ö–ê: ' + errorMsg);
        throw new Error(errorMsg);
      }
      if (!token) {
        const errorMsg = '–í—ñ–¥—Å—É—Ç–Ω—ñ–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø—É';
        console.error('‚ùå [AuthService.saveUserData] –ü–û–ú–ò–õ–ö–ê: ' + errorMsg);
        throw new Error(errorMsg);
      }

      const userData = {
        ...user,
        lastLogin: new Date().toISOString(),
        deviceInfo: this.getDeviceInfo(),
      };

      console.log('üíæ [AuthService.saveUserData] –ü—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è');

      const storageData = [
        [USER_DATA_KEY, JSON.stringify(userData)]
      ];

      if (token) {
        storageData.push([USER_TOKEN_KEY, token]);
      }
      if (refreshToken) {
        storageData.push([REFRESH_TOKEN_KEY, refreshToken]);
      }

      await AsyncStorage.multiSet(storageData);
      console.log('üíæ [AuthService.saveUserData] –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≤ AsyncStorage');

      this.currentUser = userData;
      this.token = token;
      this.refreshToken = refreshToken || null;
      this.isAuthenticated = true;

      if (token) {
        api.setTokens(token, refreshToken);
      }

      return { success: true, user: userData };
    } catch (error) {
      console.error('üí• [AuthService.saveUserData] –ü–û–ú–ò–õ–ö–ê –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:', error);
      return { success: false, error: error.message };
    }
  }
  
  async loadUserData() {
    try {
      const userData = await AsyncStorage.getItem(USER_DATA_KEY);
      const token = await AsyncStorage.getItem(USER_TOKEN_KEY);
      const refreshToken = await AsyncStorage.getItem(REFRESH_TOKEN_KEY);

      if (userData && token) {
        const parsedUserData = JSON.parse(userData);
        this.currentUser = parsedUserData;
        this.token = token;
        this.refreshToken = refreshToken;
        this.isAuthenticated = true;

        api.setTokens(token, refreshToken);

        return { success: true, user: parsedUserData };
      }

      return { success: false, error: 'No saved user data found' };
    } catch (error) {
      console.error('Error loading user data:', error);
      return { success: false, error: error.message };
    }
  }

  async clearUserData() {
    try {
      await AsyncStorage.multiRemove([
        USER_DATA_KEY,
        USER_TOKEN_KEY,
        REFRESH_TOKEN_KEY,
        DEVICE_INFO_KEY,
      ]);

      this.currentUser = null;
      this.token = null;
      this.refreshToken = null;
      this.isAuthenticated = false;

      api.clearTokens();

      return { success: true };
    } catch (error) {
      console.error('Error clearing user data:', error);
      return { success: false, error: error.message };
    }
  }

  // –í—Ö—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  /**
   * @param {LoginCredentials} credentials - –î–∞–Ω—ñ –¥–ª—è –≤—Ö–æ–¥—É
   * @returns {Promise<AuthResponse>}
   */
   async login(credentials) {
    try {
      const { email, password, rememberMe = false } = credentials;

      // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
      if (!email || !password) {
        return { success: false, error: 'Email —Ç–∞ –ø–∞—Ä–æ–ª—å –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ' };
      }

      // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –∑–∞–ø–∏—Ç—É
      const loginData = {
        email: email.trim().toLowerCase(),
        password: password.trim(),
        rememberMe,
        deviceInfo: this.getDeviceInfo(),
      };

      // –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É
      const response = await api.post('/auth/login', loginData, {
        includeAuth: false,
      });

      console.log('üîê [AuthService.login] –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞:', JSON.stringify(response, null, 2));

      if (response.success && response.data) {
        // –ü—Ä–∞–≤–∏–ª—å–Ω–µ —Ä–æ–∑–ø–∞–∫—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–µ—Ä–≤–µ—Ä–∞
        const responseData = response.data.data || response.data;
        const { user, accessToken, refreshToken } = responseData;
        const token = accessToken; // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ accessToken

        console.log('üîê [AuthService.login] –†–æ–∑–ø–∞–∫–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ:', { 
          hasUser: !!user, 
          hasToken: !!token, 
          hasRefreshToken: !!refreshToken 
        });

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        if (!user || !token) {
          const errorMessage = '–°–µ—Ä–≤–µ—Ä –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –≤—Ö–æ–¥—É';
          console.error('‚ùå [AuthService.login] –ü–æ–º–∏–ª–∫–∞:', errorMessage);
          return { success: false, error: errorMessage };
        }

        // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const saveResult = await this.saveUserData(user, token, refreshToken);

        if (saveResult.success) {
          return {
            success: true,
            data: {
              user: saveResult.user,
              accessToken: token,
              refreshToken,
            },
            user: saveResult.user,
            token, // –î–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
            refreshToken, // –î–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
          };
        } else {
          return { success: false, error: saveResult.error };
        }
      } else {
        return { success: false, error: response.error || '–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É' };
      }
    } catch (error) {
      console.error('Login error:', error);
      return { success: false, error: error.message };
    }
  }
  // –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  /**
   * @param {RegisterData} userData - –î–∞–Ω—ñ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
   * @returns {Promise<AuthResponse>}
   */
  async register(userData) {
    console.log('üîê [AuthService.register] === –ü–û–ß–ê–¢–û–ö –†–ï–Ñ–°–¢–†–ê–¶–Ü–á ===');
    console.log('üîê [AuthService.register] –û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ userData:', userData);
    
    try {
      const { firstName, lastName, email, password } = userData;

      // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
      console.log('üîê [AuthService.register] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤...');
      if (!firstName || !lastName || !email || !password) {
        const errorMessage = '–í—Å—ñ –ø–æ–ª—è –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ';
        console.warn('‚ö†Ô∏è [AuthService.register] –ü–û–ú–ò–õ–ö–ê –í–ê–õ–Ü–î–ê–¶–Ü–á:', errorMessage);
        return { success: false, error: errorMessage };
      }

      if (password.length < 6) {
        const errorMessage = '–ü–∞—Ä–æ–ª—å –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤';
        console.warn('‚ö†Ô∏è [AuthService.register] –ü–û–ú–ò–õ–ö–ê –í–ê–õ–Ü–î–ê–¶–Ü–á –ü–ê–†–û–õ–Ø:', errorMessage);
        return { success: false, error: errorMessage };
      }

      // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –∑–∞–ø–∏—Ç—É
      const registerData = {
        firstName: firstName.trim(),
        lastName: lastName.trim(),
        email: email.trim().toLowerCase(),
        password: password.trim(),
        deviceInfo: this.getDeviceInfo(),
      };

      console.log('üì§ [AuthService.register] –ü—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è API –∑–∞–ø–∏—Ç—É:', registerData);

      // –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É
      const response = await api.post('/auth/register', registerData, {
        includeAuth: false,
      });

      console.log('üì• [AuthService.register] –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ API:', response);

      if (response.success && response.data) {
        // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –¥–∞–Ω–∏—Ö
        const responseData = response.data.data || response.data;
        const { accessToken, refreshToken, user } = responseData;
        
        console.log('üì• [AuthService.register] –†–æ–∑–ø–∞–∫–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ:', { 
          hasAccessToken: !!accessToken, 
          hasRefreshToken: !!refreshToken, 
          hasUser: !!user 
        });

        // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ accessToken –∑–∞–º—ñ—Å—Ç—å token
        const token = accessToken;
        
        // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤
        if (!token) {
          const errorMessage = '–°–µ—Ä–≤–µ—Ä –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø—É';
          console.error('‚ùå [AuthService.register] –ü–æ–º–∏–ª–∫–∞: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π accessToken');
          return { success: false, error: errorMessage };
        }

        // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        console.log('üíæ [AuthService.register] –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ saveUserData...');
        const saveResult = await this.saveUserData(user, token, refreshToken || '');

        if (saveResult.success) {
          console.log('‚úÖ [AuthService.register] –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞');
          return {
            success: true,
            user: saveResult.user,
            token, // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ accessToken
            refreshToken: refreshToken || '', // –ú–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º
          };
        } else {
          console.error('‚ùå [AuthService.register] –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', saveResult.error);
          return { success: false, error: saveResult.error };
        }
      } else {
        const errorMessage = response.error || '–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó';
        console.error('‚ùå [AuthService.register] –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:', errorMessage);
        return { success: false, error: errorMessage };
      }
    } catch (error) {
      console.error('üí• [AuthService.register] –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:', error);
      return { success: false, error: error.message };
    }
  }

  // –í–∏—Ö—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  /**
   * @returns {Promise<{success: boolean, error?: string}>}
   */
  async logout() {
    try {
      // –°–ø—Ä–æ–±–∞ –≤–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤–∏—Ö–æ–¥—É
      if (this.token) {
        await api.post('/auth/logout', {}, {
          includeAuth: true,
        }).catch(error => {
          // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –≤–∏—Ö–æ–¥—É, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–∞–∂–ª–∏–≤—ñ—à–µ –æ—á–∏—Å—Ç–∏—Ç–∏ –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
          console.warn('Logout API call failed:', error);
        });
      }

      // –û—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      const clearResult = await this.clearUserData();

      return clearResult;
    } catch (error) {
      console.error('Logout error:', error);
      // –í—Å–µ –æ–¥–Ω–æ –æ—á–∏—â—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –Ω–∞–≤—ñ—Ç—å –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
      await this.clearUserData();
      return { success: false, error: error.message };
    }
  }

  // –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è
  /**
   * @param {string} email - Email –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   * @returns {Promise<{success: boolean, error?: string, message?: string}>}
   */
  async forgotPassword(email) {
    try {
      if (!email) {
        return { success: false, error: 'Email –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π' };
      }

      // –í–∞–ª—ñ–¥–∞—Ü—ñ—è email
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        return { success: false, error: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email' };
      }

      const response = await api.post('/auth/forgot-password', {
        email: email.trim().toLowerCase(),
      }, {
        includeAuth: false,
      });

      if (response.success) {
        return {
          success: true,
          message: response.data?.message || '–ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –≤–∞—à email',
        };
      } else {
        return { success: false, error: response.error || '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è' };
      }
    } catch (error) {
      console.error('Forgot password error:', error);
      return { success: false, error: error.message };
    }
  }

  // –°–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è
  /**
   * @param {string} token - –¢–æ–∫–µ–Ω –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è
   * @param {string} newPassword - –ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å
   * @returns {Promise<{success: boolean, error?: string, message?: string}>}
   */
  async resetPassword(token, newPassword) {
    try {
      if (!token || !newPassword) {
        return { success: false, error: '–¢–æ–∫–µ–Ω —Ç–∞ –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ' };
      }

      if (newPassword.length < 6) {
        return { success: false, error: '–ü–∞—Ä–æ–ª—å –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤' };
      }

      const response = await api.post('/auth/reset-password', {
        token,
        password: newPassword.trim(),
      }, {
        includeAuth: false,
      });

      if (response.success) {
        return {
          success: true,
          message: response.data?.message || '–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ',
        };
      } else {
        return { success: false, error: response.error || '–ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è' };
      }
    } catch (error) {
      console.error('Reset password error:', error);
      return { success: false, error: error.message };
    }
  }

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  /**
   * @param {Partial<User>} userData - –û–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   * @returns {Promise<{success: boolean, user?: User, error?: string}>}
   */
 async updateProfile(userData) {
    try {
      if (!this.isAuthenticated || !this.token) {
        return { success: false, error: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π' };
      }

      // –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ PUT –∑–∞–ø–∏—Ç –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
      const response = await api.put('/auth/profile', userData, {
        includeAuth: true,
      });

      if (response.success && response.data) {
        const updatedUser = response.data;

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å—Ö–æ–≤–∏—â—ñ
        const currentData = await AsyncStorage.getItem(USER_DATA_KEY);
        if (currentData) {
          const parsedData = JSON.parse(currentData);
          const mergedData = { ...parsedData, ...updatedUser };
          
          await AsyncStorage.setItem(USER_DATA_KEY, JSON.stringify(mergedData));
          this.currentUser = mergedData;
        }

        return { success: true, user: updatedUser };
      } else {
        return { success: false, error: response.error || '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é' };
      }
    } catch (error) {
      console.error('Update profile error:', error);
      return { success: false, error: error.message };
    }
  }

  // –ó–º—ñ–Ω–∞ –ø–∞—Ä–æ–ª—è
  /**
   * @param {string} currentPassword - –ü–æ—Ç–æ—á–Ω–∏–π –ø–∞—Ä–æ–ª—å
   * @param {string} newPassword - –ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å
   * @returns {Promise<{success: boolean, error?: string, message?: string}>}
   */
  async changePassword(currentPassword, newPassword) {
    try {
      if (!currentPassword || !newPassword) {
        return { success: false, error: '–ü–æ—Ç–æ—á–Ω–∏–π —Ç–∞ –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ' };
      }

      if (newPassword.length < 6) {
        return { success: false, error: '–ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤' };
      }

      const response = await api.put('/auth/password', { // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –∑ POST –Ω–∞ PUT
        currentPassword,
        newPassword,
      }, {
        includeAuth: true,
      });

      if (response.success) {
        return {
          success: true,
          message: response.data?.message || '–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ',
        };
      } else {
        return { success: false, error: response.error || '–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è' };
      }
    } catch (error) {
      console.error('Change password error:', error);
      return { success: false, error: error.message };
    }
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
  /**
   * @returns {Promise<{isAuthenticated: boolean, user?: User}>}
   */
  async checkAuthStatus() {
    try {
      // –Ø–∫—â–æ –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–∫–µ–Ω
      if (this.token) {
        const isValid = await this.validateToken(this.token);
        if (isValid) {
          return { isAuthenticated: true, user: this.currentUser };
        } else {
          // –Ø–∫—â–æ —Ç–æ–∫–µ–Ω –Ω–µ–¥—ñ–π—Å–Ω–∏–π - –ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏
          try {
            const refreshResult = await this.refreshToken();
            if (refreshResult.success) {
              return { isAuthenticated: true, user: this.currentUser };
            } else {
              await this.clearUserData();
              return { isAuthenticated: false };
            }
          } catch (refreshError) {
            await this.clearUserData();
            return { isAuthenticated: false };
          }
        }
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö
      const loadResult = await this.loadUserData();
      return {
        isAuthenticated: loadResult.success,
        user: loadResult.success ? loadResult.user : null,
      };
    } catch (error) {
      console.error('Check auth status error:', error);
      await this.clearUserData();
      return { isAuthenticated: false };
    }
  }

  // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω–∞
  /**
   * @param {string} token - –¢–æ–∫–µ–Ω –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
   * @returns {Promise<boolean>}
   */
  async validateToken(token) {
    try {
      const response = await api.get('/auth/me', { // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –∑ /auth/validate-token –Ω–∞ /auth/me
        headers: { Authorization: `Bearer ${token}` },
        includeAuth: false,
      });

      return response.success && response.data;
    } catch (error) {
      console.error('Token validation error:', error);
      return false;
    }
  }

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
  /**
   * @returns {Promise<{success: boolean, token?: string, refreshToken?: string, error?: string}>}
   */
  async refreshToken() {
    try {
      if (!this.refreshToken) {
        throw new Error('No refresh token available');
      }

      const response = await api.post('/auth/refresh', { // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –∑ /auth/refresh-token –Ω–∞ /auth/refresh
        refreshToken: this.refreshToken, // –¶–µ –ø—Ä–∞–≤–∏–ª—å–Ω–µ –ø–æ–ª–µ –¥–ª—è –±–µ–∫–µ–Ω–¥—É
      }, {
        includeAuth: false,
      });

      if (response.success && response.data) {
        const { token, refreshToken } = response.data;

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤
        await this.saveUserData(this.currentUser, token, refreshToken);

        return { success: true, token, refreshToken };
      } else {
        throw new Error(response.error || 'Failed to refresh token');
      }
    } catch (error) {
      console.error('Refresh token error:', error);
      await this.clearUserData();
      return { success: false, error: error.message };
    }
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  /**
   * @returns {User | null}
   */
  getCurrentUser() {
    return this.currentUser;
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
  /**
   * @returns {boolean}
   */
  getIsAuthenticated() {
    return this.isAuthenticated;
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
  /**
   * @returns {string | null}
   */
  getToken() {
    return this.token;
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è refresh —Ç–æ–∫–µ–Ω–∞
  /**
   * @returns {string | null}
   */
  getRefreshToken() {
    return this.refreshToken;
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  /**
   * @returns {string}
   */
  getUserFullName() {
    if (this.currentUser) {
      return `${this.currentUser.firstName} ${this.currentUser.lastName}`;
    }
    return '';
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è email –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  /**
   * @returns {string | null}
   */
  getUserEmail() {
    return this.currentUser?.email || null;
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  /**
   * @returns {number | null}
   */
  getUserId() {
    return this.currentUser?.id || null;
  }
}

// –ï–∫–∑–µ–º–ø–ª—è—Ä AuthService
const authService = new AuthService();

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
export default authService;

// –ï–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—É –¥–ª—è –º–æ–∂–ª–∏–≤–æ–≥–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
export { AuthService };

// –ï–∫—Å–ø–æ—Ä—Ç –¥–æ–ø–æ–º—ñ–∂–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
export const mockAuthCall = async (delay = 1000, shouldFail = false, userData = null) => {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      if (shouldFail) {
        reject(new Error('Mock auth call failed'));
      } else {
        resolve({
          success: true,
          data: userData || {
            user: {
              id: 1,
              firstName: '–Ü–≤–∞–Ω',
              lastName: '–ü–µ—Ç—Ä–µ–Ω–∫–æ',
              email: 'ivan@example.com',
            },
            token: 'mock-jwt-token',
            refreshToken: 'mock-refresh-token',
          },
        });
      }
    }, delay);
  });
};

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
export const createAuthService = (config = {}) => {
  const service = new AuthService();
  // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
  return service;
};