// src/hooks/useAuth.js
import { useState, useEffect, useCallback, useContext } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { AuthContext } from '../contexts/AuthContext';
import authService from '../services/authService';

const TOKEN_KEY = 'userToken';
const USER_KEY = 'userData';
const REFRESH_TOKEN_KEY = 'refreshToken';
const REMEMBER_ME_KEY = 'rememberMe';

export const useAuth = () => {
  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
  const context = useContext(AuthContext);
  
  if (!context) {
    const errorMsg = 'useAuth must be used within an AuthProvider';
    console.error('‚ùå [useAuth] –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', errorMsg);
    throw new Error(errorMsg);
  }

  const { 
    isAuthenticated: contextIsAuthenticated, 
    user: contextUser, 
    isLoading: contextLoading,
    checkAuthStatus: contextCheckAuthStatus,
    login: contextLogin,
    register: contextRegister, // –¶–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è
    logout: contextLogout,
    loginAsGuest: contextLoginAsGuest,
    updateUser: contextUpdateUser
  } = context;

  // –õ–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [token, setToken] = useState(null);
  const [refreshToken, setRefreshToken] = useState(null);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É —Ç–∞ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
  useEffect(() => {
    console.log('üì• [useEffect] –ï—Ñ–µ–∫—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑–∞–ø—É—â–µ–Ω–æ');
    const loadStoredAuthData = async () => {
      try {
        console.log('üì• [loadStoredAuthData] –ü–æ—á–∞—Ç–æ–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ AsyncStorage');
        const storedToken = await AsyncStorage.getItem(TOKEN_KEY);
        const storedUser = await AsyncStorage.getItem(USER_KEY);
        const storedRefreshToken = await AsyncStorage.getItem(REFRESH_TOKEN_KEY);
        
        console.log('üì• [loadStoredAuthData] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –¥–∞–Ω—ñ:', { 
          hasStoredToken: !!storedToken, 
          hasStoredUser: !!storedUser, 
          hasStoredRefreshToken: !!storedRefreshToken 
        });
        
        if (storedToken) {
          setToken(storedToken);
          console.log('üì• [loadStoredAuthData] –¢–æ–∫–µ–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω');
        }
        
        if (storedRefreshToken) {
          setRefreshToken(storedRefreshToken);
          console.log('üì• [loadStoredAuthData] Refresh —Ç–æ–∫–µ–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω');
        }
      } catch (error) {
        console.error('‚ùå [loadStoredAuthData] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:', error);
      }
    };

    loadStoredAuthData();
  }, []);

  // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω—É
  const validateToken = useCallback(async (authToken) => {
    console.log('üîç [validateToken] –ü–æ—á–∞—Ç–æ–∫ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ç–æ–∫–µ–Ω—É:', !!authToken);
    if (!authToken) {
      console.log('‚ö†Ô∏è [validateToken] –¢–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞');
      return false;
    }

    try {
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ authService –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ç–æ–∫–µ–Ω—É
      const isValid = await authService.validateToken(authToken);
      console.log('‚úÖ [validateToken] –¢–æ–∫–µ–Ω –≤–∞–ª—ñ–¥–Ω–∏–π:', isValid);
      return isValid;
    } catch (error) {
      console.error('‚ùå [validateToken] –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ç–æ–∫–µ–Ω—É:', error);
      return false;
    }
  }, []);

  // Auto-refresh —Ç–æ–∫–µ–Ω—É
  const refreshAuthToken = useCallback(async () => {
    console.log('üîÑ [refreshAuthToken] –ü–æ—á–∞—Ç–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É');
    if (!refreshToken) {
      const errorMsg = 'No refresh token available';
      console.warn('‚ö†Ô∏è [refreshAuthToken] Refresh —Ç–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
      throw new Error(errorMsg);
    }

    try {
      setLoading(true);
      setError(null);
      console.log('üîÑ [refreshAuthToken] –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É');

      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ authService –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É
      const response = await authService.refreshToken();
      
      if (response.success) {
        console.log('‚úÖ [refreshAuthToken] –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–≤—ñ —Ç–æ–∫–µ–Ω–∏');

        // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤
        await AsyncStorage.setItem(TOKEN_KEY, response.token);
        await AsyncStorage.setItem(REFRESH_TOKEN_KEY, response.refreshToken);
        console.log('üíæ [refreshAuthToken] –ù–æ–≤—ñ —Ç–æ–∫–µ–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≤ AsyncStorage');
        
        setToken(response.token);
        setRefreshToken(response.refreshToken);
        console.log('üîÑ [refreshAuthToken] –õ–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω —Ç–æ–∫–µ–Ω—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ');

        return response;
      } else {
        throw new Error(response.error || 'Failed to refresh token');
      }
    } catch (error) {
      console.error('‚ùå [refreshAuthToken] –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É:', error);
      setError(error.message);
      throw error;
    } finally {
      setLoading(false);
      console.log('üîÑ [refreshAuthToken] –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É');
    }
  }, [refreshToken]);

  // –í—Ö—ñ–¥
  const login = useCallback(async (loginData) => {
    console.log('üîê [useAuth.login] === –ü–û–ß–ê–¢–û–ö –í–•–û–î–£ ===');
    console.log('üîê [useAuth.login] –í–•–Ü–î–ù–Ü –ü–ê–†–ê–ú–ï–¢–†–ò:', loginData);
    
    try {
      setLoading(true);
      setError(null);
      console.log('üîê [useAuth.login] –°—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ true');

      // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
      const { email, password, rememberMe = false } = loginData;
      
      console.log('üîê [useAuth.login] –†–æ–∑–ø–∞–∫–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ:', { email, hasPassword: !!password, rememberMe });
      
      if (!email || !password) {
        const errorMsg = 'Email —Ç–∞ –ø–∞—Ä–æ–ª—å –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ';
        console.warn('‚ö†Ô∏è [useAuth.login] –ü–û–ú–ò–õ–ö–ê –í–ê–õ–Ü–î–ê–¶–Ü–á: –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –¥–∞–Ω—ñ');
        throw new Error(errorMsg);
      }

      console.log('üîê [useAuth.login] –í—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω–æ, –ø–µ—Ä–µ–¥–∞—î–º–æ –¥–∞–Ω—ñ –≤ authService');
      
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ authService –¥–ª—è –≤—Ö–æ–¥—É
      const response = await authService.login(loginData);
      console.log('üîê [useAuth.login] –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ authService:', response);
      
      if (response.success && response.data) {
        // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –¥–∞–Ω–∏—Ö
        const loginResult = response.data;
        const { accessToken, refreshToken, user } = loginResult;
        const token = accessToken; // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ accessToken
        
        console.log('üîê [useAuth.login] –†–æ–∑–ø–∞–∫–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', { 
          hasToken: !!token, 
          hasRefreshToken: !!refreshToken, 
          hasUser: !!user 
        });

        if (!token || !user) {
          const errorMsg = '–°–µ—Ä–≤–µ—Ä –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ';
          console.error('‚ùå [useAuth.login] –ü–û–ú–ò–õ–ö–ê: ' + errorMsg);
          throw new Error(errorMsg);
        }

        console.log('‚úÖ [useAuth.login] –£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥ —á–µ—Ä–µ–∑ authService');

        // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        console.log('üíæ [useAuth.login] –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...');
        await AsyncStorage.setItem(TOKEN_KEY, token);
        if (refreshToken) {
          await AsyncStorage.setItem(REFRESH_TOKEN_KEY, refreshToken);
        }
        await AsyncStorage.setItem(USER_KEY, JSON.stringify(user));
        await AsyncStorage.setItem(REMEMBER_ME_KEY, rememberMe.toString());
        console.log('üíæ [useAuth.login] –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≤ AsyncStorage');

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        console.log('üîÑ [useAuth.login] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —á–µ—Ä–µ–∑ contextLogin');
        const contextLoginResult = await contextLogin(user, token);
        console.log('üîÑ [useAuth.login] –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É:', contextLoginResult);
        
        if (!contextLoginResult.success) {
          const errorMsg = contextLoginResult.error || '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É';
          console.error('‚ùå [useAuth.login] –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É:', errorMsg);
          throw new Error(errorMsg);
        }

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        setToken(token);
        setRefreshToken(refreshToken || null);
        console.log('üîê [useAuth.login] –õ–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ, –≤—Ö—ñ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');

        return { 
          success: true, 
          user: user, 
          token: token, 
          refreshToken: refreshToken || null
        };
      } else {
        const errorMsg = response.error || '–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É';
        console.error('‚ùå [useAuth.login] –ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É –≤—ñ–¥ authService:', errorMsg);
        throw new Error(errorMsg);
      }
    } catch (error) {
      console.error('üí• [useAuth.login] –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê –≤—Ö–æ–¥—É:', error);
      setError(error.message);
      return { success: false, error: error.message };
    } finally {
      setLoading(false);
      console.log('üîê [useAuth.login] === –ó–ê–í–ï–†–®–ï–ù–ù–Ø –í–•–û–î–£ ===');
    }
  }, [contextLogin]);
  const register = useCallback(async (firstName, lastName, email, password) => {
    console.log('üìù [useAuth.register] === –ü–û–ß–ê–¢–û–ö –†–ï–Ñ–°–¢–†–ê–¶–Ü–á ===');
    console.log('üìù [useAuth.register] –í–•–Ü–î–ù–Ü –ü–ê–†–ê–ú–ï–¢–†–ò:', { 
      firstName, 
      lastName, 
      email, 
      hasPassword: !!password,
      passwordLength: password ? password.length : 0
    });
    
    try {
      setLoading(true);
      setError(null);
      console.log('üìù [useAuth.register] –°—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ true');

      // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
      console.log('üìù [useAuth.register] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤...');
      if (!firstName || !lastName || !email || !password) {
        const errorMsg = '–í—Å—ñ –ø–æ–ª—è –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ';
        console.warn('‚ö†Ô∏è [useAuth.register] –ü–û–ú–ò–õ–ö–ê –í–ê–õ–Ü–î–ê–¶–Ü–á: –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –¥–∞–Ω—ñ');
        console.log('‚ö†Ô∏è [useAuth.register] –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ –ø–æ–ª—è:', {
          firstNameMissing: !firstName,
          lastNameMissing: !lastName,
          emailMissing: !email,
          passwordMissing: !password
        });
        throw new Error(errorMsg);
      }

      if (password.length < 6) {
        const errorMsg = '–ü–∞—Ä–æ–ª—å –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤';
        console.warn('‚ö†Ô∏è [useAuth.register] –ü–û–ú–ò–õ–ö–ê –í–ê–õ–Ü–î–ê–¶–Ü–á –ü–ê–†–û–õ–Ø:', errorMsg);
        throw new Error(errorMsg);
      }

      console.log('üìù [useAuth.register] –í—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω–æ, –ø–µ—Ä–µ–¥–∞—î–º–æ –¥–∞–Ω—ñ –≤ authService');
      
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ authService –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó (–Ω–µ contextRegister!)
      const registerData = { firstName, lastName, email, password };
      console.log('üìù [useAuth.register] –ü—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è authService.register:', registerData);
      
      const response = await authService.register(registerData);
      console.log('üìù [useAuth.register] –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ authService:', response);
      
      if (response.success) {
        console.log('‚úÖ [useAuth.register] –£—Å–ø—ñ—à–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —á–µ—Ä–µ–∑ authService');

        // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        console.log('üíæ [useAuth.register] –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...');
        await AsyncStorage.setItem(TOKEN_KEY, response.token);
        if (response.refreshToken) {
          await AsyncStorage.setItem(REFRESH_TOKEN_KEY, response.refreshToken);
        }
        await AsyncStorage.setItem(USER_KEY, JSON.stringify(response.user));
        console.log('üíæ [useAuth.register] –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≤ AsyncStorage');

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        setToken(response.token);
        setRefreshToken(response.refreshToken);
        console.log('üìù [useAuth.register] –õ–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ');

        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —É—Å–ø—ñ—Ö –±–µ–∑ –≤–∏–∫–ª–∏–∫—É contextRegister
        return { 
          success: true, 
          user: response.user, 
          token: response.token, 
          refreshToken: response.refreshToken 
        };
      } else {
        const errorMsg = response.error || '–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó';
        console.error('‚ùå [useAuth.register] –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤—ñ–¥ authService:', errorMsg);
        throw new Error(errorMsg);
      }
    } catch (error) {
      console.error('üí• [useAuth.register] –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:', error);
      setError(error.message);
      return { success: false, error: error.message };
    } finally {
      setLoading(false);
      console.log('üìù [useAuth.register] === –ó–ê–í–ï–†–®–ï–ù–ù–Ø –†–ï–Ñ–°–¢–†–ê–¶–Ü–á ===');
    }
  }, [contextRegister, login]);

  // –í–∏—Ö—ñ–¥
  const logout = useCallback(async () => {
    console.log('üö™ [logout] –ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –≤–∏—Ö–æ–¥—É');
    try {
      setLoading(true);
      
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ authService –¥–ª—è –≤–∏—Ö–æ–¥—É
      await authService.logout();
      
      // –í–∏–¥–∞–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ AsyncStorage
      await AsyncStorage.removeItem(TOKEN_KEY);
      await AsyncStorage.removeItem(USER_KEY);
      await AsyncStorage.removeItem(REFRESH_TOKEN_KEY);
      await AsyncStorage.removeItem(REMEMBER_ME_KEY);
      console.log('üóëÔ∏è [logout] –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∏–¥–∞–ª–µ–Ω—ñ –∑ AsyncStorage');

      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
      console.log('üîÑ [logout] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —á–µ—Ä–µ–∑ contextLogout');
      await contextLogout();
      console.log('üîÑ [logout] –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ');

      setToken(null);
      setRefreshToken(null);
      setError(null);
      console.log('üö™ [logout] –õ–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –æ—á–∏—â–µ–Ω–æ');

      return { success: true };
    } catch (error) {
      console.error('‚ùå [logout] –ü–æ–º–∏–ª–∫–∞ –≤–∏—Ö–æ–¥—É:', error);
      setError(error.message);
      return { success: false, error: error.message };
    } finally {
      setLoading(false);
      console.log('üö™ [logout] –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É –≤–∏—Ö–æ–¥—É');
    }
  }, [contextLogout]);

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
  const updateProfile = useCallback(async (userData) => {
    console.log('‚úèÔ∏è [updateProfile] –ü–æ—á–∞—Ç–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é', { hasUserData: !!userData });
    try {
      setLoading(true);
      setError(null);

      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ authService –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
      const response = await authService.updateProfile(userData);
      
      if (response.success) {
        console.log('‚úÖ [updateProfile] –ü—Ä–æ—Ñ—ñ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ');

        // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        await AsyncStorage.setItem(USER_KEY, JSON.stringify(response.user));
        console.log('üíæ [updateProfile] –û–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≤ AsyncStorage');

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        console.log('üîÑ [updateProfile] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —á–µ—Ä–µ–∑ contextUpdateUser');
        await contextUpdateUser(response.user);
        console.log('üîÑ [updateProfile] –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ');

        return { success: true, user: response.user };
      } else {
        throw new Error(response.error || '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é');
      }
    } catch (error) {
      console.error('‚ùå [updateProfile] –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é:', error);
      setError(error.message);
      return { success: false, error: error.message };
    } finally {
      setLoading(false);
      console.log('‚úèÔ∏è [updateProfile] –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é');
    }
  }, [contextUser, contextUpdateUser]);

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π (–ª–æ–∫–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è)
  const checkIsAuthenticatedLocally = useCallback(async () => {
    console.log('üîê [checkIsAuthenticatedLocally] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó', { hasToken: !!token });
    if (!token) {
      console.log('‚ö†Ô∏è [checkIsAuthenticatedLocally] –¢–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π');
      return false;
    }
    
    const isValid = await validateToken(token);
    console.log('üîê [checkIsAuthenticatedLocally] –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ç–æ–∫–µ–Ω—É:', isValid);
    if (!isValid) {
      // –Ø–∫—â–æ —Ç–æ–∫–µ–Ω –Ω–µ–¥—ñ–π—Å–Ω–∏–π, —Å–ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏ –π–æ–≥–æ
      try {
        console.log('üîÑ [checkIsAuthenticatedLocally] –°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É');
        await refreshAuthToken();
        console.log('‚úÖ [checkIsAuthenticatedLocally] –¢–æ–∫–µ–Ω —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ');
        return true;
      } catch (error) {
        console.error('‚ùå [checkIsAuthenticatedLocally] –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É, –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –≤–∏—Ö–æ–¥—É');
        await logout();
        return false;
      }
    }
    
    console.log('‚úÖ [checkIsAuthenticatedLocally] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π');
    return true;
  }, [token, validateToken, refreshAuthToken, logout]);

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  const getUser = useCallback(async () => {
    console.log('üë§ [getUser] –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
    try {
      const storedUser = await AsyncStorage.getItem(USER_KEY);
      console.log('üë§ [getUser] –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ—Ç—Ä–∏–º–∞–Ω—ñ –∑ AsyncStorage:', !!storedUser);
      return storedUser ? JSON.parse(storedUser) : null;
    } catch (error) {
      console.error('‚ùå [getUser] –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);
      return null;
    }
  }, []);

  // –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è
  const forgotPassword = useCallback(async (email) => {
    console.log('orgotPassword] –ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è', { email });
    try {
      setLoading(true);
      setError(null);

      if (!email) {
        const errorMsg = 'Email –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π';
        console.warn('‚ö†Ô∏è [forgotPassword] Email –Ω–µ –≤–∫–∞–∑–∞–Ω–∏–π');
        throw new Error(errorMsg);
      }

      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ authService –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è
      const response = await authService.forgotPassword(email);
      
      if (response.success) {
        console.log('‚úÖ [forgotPassword] –ó–∞–ø–∏—Ç –Ω–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ');
        return { success: true, message: response.message };
      } else {
        throw new Error(response.error || '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è');
      }
    } catch (error) {
      console.error('‚ùå [forgotPassword] –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è:', error);
      setError(error.message);
      return { success: false, error: error.message };
    } finally {
      setLoading(false);
      console.log('orgotPassword] –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è');
    }
  }, []);

  // –ó–º—ñ–Ω–∞ –ø–∞—Ä–æ–ª—è
  const resetPassword = useCallback(async (token, newPassword) => {
    console.log('üîë [resetPassword] –ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è', { hasToken: !!token, hasNewPassword: !!newPassword });
    try {
      setLoading(true);
      setError(null);

      if (!token || !newPassword) {
        const errorMsg = '–¢–æ–∫–µ–Ω —Ç–∞ –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ';
        console.warn('‚ö†Ô∏è [resetPassword] –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è');
        throw new Error(errorMsg);
      }

      if (newPassword.length < 6) {
        const errorMsg = '–ü–∞—Ä–æ–ª—å –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤';
        console.warn('‚ö†Ô∏è [resetPassword] –ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π');
        throw new Error(errorMsg);
      }

      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ authService –¥–ª—è –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è
      const response = await authService.resetPassword(token, newPassword);
      
      if (response.success) {
        console.log('‚úÖ [resetPassword] –ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ');
        return { success: true, message: response.message };
      } else {
        throw new Error(response.error || '–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è');
      }
    } catch (error) {
      console.error('‚ùå [resetPassword] –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è:', error);
      setError(error.message);
      return { success: false, error: error.message };
    } finally {
      setLoading(false);
      console.log('üîë [resetPassword] –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è');
    }
  }, []);

  // –û—á–∏—â–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫
  const clearError = useCallback(() => {
    console.log('üßπ [clearError] –û—á–∏—â–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫');
    setError(null);
  }, []);

  // –§–æ—Ä–º—É—î–º–æ –æ–±'—î–∫—Ç, —è–∫–∏–π –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è
  const returnValue = {
    // –°—Ç–∞–Ω–∏
    loading: loading || contextLoading,
    error,
    user: contextUser,
    token,
    isAuthenticated: contextIsAuthenticated,
    isGuest: context.isGuest,
    
    // –§—É–Ω–∫—Ü—ñ—ó –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    checkAuthStatus: contextCheckAuthStatus,
    login: contextLogin,
    register: register, // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞—à—É –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
    logout: contextLogout,
    updateUser: contextUpdateUser,
    loginAsGuest: context.loginAsGuest,
    
    // –õ–æ–∫–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
    refreshAuthToken,
    checkIsAuthenticatedLocally,
    getUser,
    updateProfile,
    forgotPassword,
    resetPassword,
    clearError,
    
    // –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
    validateToken,
  };

  return returnValue;
};