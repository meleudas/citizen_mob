// src/contexts/AuthContext.js
import React, { createContext, useState, useCallback, useEffect } from 'react';
import authService from '../services/authService'; // –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ —à–ª—è—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π

export const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isGuest, setIsGuest] = useState(false); // –î–æ–¥–∞–Ω–æ —Å—Ç–∞–Ω –¥–ª—è –≥–æ—Å—Ç—è
  const [isLoading, setIsLoading] = useState(true); // –ü–æ—á–∞—Ç–∫–æ–≤–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
  const [user, setUser] = useState(null);

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ AuthService
  const checkAuthStatus = useCallback(async () => {
    try {
      setIsLoading(true);
      const authResult = await authService.checkAuthStatus();
      
      if (authResult.isAuthenticated && authResult.user) {
        setIsAuthenticated(true);
        setIsGuest(false); // –ù–µ –≥—ñ—Å—Ç—å, —è–∫—â–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π
        setUser(authResult.user);
      } else {
        setIsAuthenticated(false);
        setIsGuest(false); // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –≥–æ—Å—Ç—è –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ
        setUser(null);
      }
    } catch (error) {
      console.error('Auth check error:', error);
      setIsAuthenticated(false);
      setIsGuest(false);
      setUser(null);
    } finally {
      setIsLoading(false);
    }
  }, []);

  // –õ–æ–≥—ñ–Ω —á–µ—Ä–µ–∑ AuthService
  const login = useCallback(async (credentials) => {
    try {
      setIsLoading(true);
      const result = await authService.login(credentials);
      
      if (result.success && result.user) {
        setIsAuthenticated(true);
        setIsGuest(false); // –ù–µ –≥—ñ—Å—Ç—å –ø—ñ—Å–ª—è –ª–æ–≥—ñ–Ω—É
        setUser(result.user);
      }
      return result;
    } catch (error) {
      console.error('Login error:', error);
      return { success: false, error: error.message };
    } finally {
      setIsLoading(false);
    }
  }, []);

  // –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —á–µ—Ä–µ–∑ AuthService
  const register = useCallback(async (userData) => {
    try {
      setIsLoading(true);
      const result = await authService.register(userData);
      
      if (result.success && result.user) {
        setIsAuthenticated(true);
        setIsGuest(false); // –ù–µ –≥—ñ—Å—Ç—å –ø—ñ—Å–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
        setUser(result.user);
      }
      return result;
    } catch (error) {
      console.error('Register error:', error);
      return { success: false, error: error.message };
    } finally {
      setIsLoading(false);
    }
  }, []);

  // –í—Ö—ñ–¥ —è–∫ –≥—ñ—Å—Ç—å
  const loginAsGuest = useCallback(() => {
    console.log('üë• [AuthContext] –í—Ö—ñ–¥ —è–∫ –≥—ñ—Å—Ç—å');
    setIsAuthenticated(false); // –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π
    setIsGuest(true); // –ê–ª–µ —î –≥—ñ—Å—Ç—å
    setUser({ 
      id: 'guest', 
      firstName: '–ì—ñ—Å—Ç—å', 
      lastName: '', 
      email: 'guest@example.com',
      isGuest: true 
    });
    setIsLoading(false);
  }, []);

  // –õ–æ–≥–∞—É—Ç —á–µ—Ä–µ–∑ AuthService (–≤–∏—Ö—ñ–¥ —Ç–∞–∫–æ–∂ –∑ –≥–æ—Å—Ç—å–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º—É)
  const logout = useCallback(async () => {
    try {
      setIsLoading(true);
      await authService.logout();
      setIsAuthenticated(false);
      setIsGuest(false); // –í–∏—Ö—ñ–¥ –∑ –≥–æ—Å—Ç—å–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º—É
      setUser(null);
    } catch (error) {
      console.error('Logout error:', error);
    } finally {
      setIsLoading(false);
    }
  }, []);

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ AuthService
  const updateUser = useCallback(async (userData) => {
    try {
      const result = await authService.updateProfile(userData);
      if (result.success && result.user) {
        setUser(result.user);
      }
      return result;
    } catch (error) {
      console.error('Update user error:', error);
      return { success: false, error: error.message };
    }
  }, []);

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –ø—Ä–∏ –º–æ–Ω—Ç—É–≤–∞–Ω–Ω—ñ
  useEffect(() => {
    checkAuthStatus();
  }, [checkAuthStatus]);

  const value = {
    isAuthenticated,
    isGuest, // –î–æ–¥–∞–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    isLoading,
    user,
    checkAuthStatus,
    login,
    register,
    loginAsGuest, // –î–æ–¥–∞–Ω–æ —Ñ—É–Ω–∫—Ü—ñ—é
    logout,
    updateUser,
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};