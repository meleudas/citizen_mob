// src/screens/violations/AddViolationScreen.js
import React, { useState, useCallback, useRef, useEffect } from 'react';
import {
  View,
  StyleSheet,
  Alert,
  Modal,
  Platform,
  TouchableOpacity,
  Text,
} from 'react-native';
import { useFocusEffect } from '@react-navigation/native';
import ViolationForm from '../../components/forms/ViolationForm';
import { useAppTheme } from '../../hooks/useTheme';
import { useLanguage } from '../../hooks/useLanguage';
import { useViolations } from '../../hooks/useViolations';
// –î–û–î–ê–ù–û –Ω–æ–≤—ñ —Ö—É–∫–∏
import { useCloudinary } from '../../hooks/useCloudinary';
import { useSync } from '../../hooks/useSync';
import { useNetwork } from '../../hooks/useNetwork';

const AddViolationScreen = ({ navigation }) => {
  const { colors } = useAppTheme();
  const { t } = useLanguage();
  const { addViolation, loading, error: violationsError } = useViolations();
  // –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ö—É–∫—ñ–≤
  const { uploadPhoto, uploading, error: cloudinaryError } = useCloudinary();
  const { saveOfflineViolation, syncData, pendingCount } = useSync();
  const network = useNetwork();
  
  const [formError, setFormError] = useState(null);
  const [showCancelModal, setShowCancelModal] = useState(false);
  const [pendingAction, setPendingAction] = useState(null);
  const [isOnline, setIsOnline] = useState(network.isOnline() && network.isInternetReachable);
  
  // Ref –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –º–µ—Ç–æ–¥—ñ–≤ —Ñ–æ—Ä–º–∏
  const formRef = useRef();

  // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –º–µ—Ä–µ–∂—ñ
  useEffect(() => {
    const updateNetworkStatus = () => {
      const onlineStatus = network.isOnline() && network.isInternetReachable;
      setIsOnline(onlineStatus);
      
      // –Ø–∫—â–æ –º–µ—Ä–µ–∂–∞ –∑'—è–≤–∏–ª–∞—Å—è —ñ —î –æ—Ñ–ª–∞–π–Ω –¥–∞–Ω—ñ - –∑–∞–ø—É—Å–∫–∞—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é
      if (onlineStatus && pendingCount > 0) {
        syncData();
      }
    };
    
    updateNetworkStatus();
  }, [network, pendingCount, syncData]);

  // –û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö —Å–ø—Ä–æ–± –≤–∏—Ö–æ–¥—É –∑ –µ–∫—Ä–∞–Ω—É
  useFocusEffect(
    useCallback(() => {
      const unsubscribe = navigation.addListener('beforeRemove', (e) => {
        // –ü–µ—Ä–µ—à–∫–æ–¥–∂–∞—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ–π –ø–æ–≤–µ–¥—ñ–Ω—Ü—ñ
        e.preventDefault();
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥—ñ—é, —è–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏
        setPendingAction(e.data.action);
        
        // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        setShowCancelModal(true);
      });

      return unsubscribe;
    }, [navigation])
  );

  // –û–±—Ä–æ–±–∫–∞ —Å–∞–±–º—ñ—Ç—É —Ñ–æ—Ä–º–∏
  const handleSubmit = async (formData) => {
    try {
      setFormError(null);
      
      // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
      const violationData = {
        description: formData.description,
        category: formData.category,
        location: {
          type: 'Point',
          coordinates: [formData.location.longitude, formData.location.latitude], // [–¥–æ–≤–≥–æ—Ç–∞, —à–∏—Ä–æ—Ç–∞]
        },
        dateTime: formData.dateTime,
      };

      console.log('üì§ [AddViolationScreen] –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–∏—Ö –ø—Ä–∞–≤–æ–ø–æ—Ä—É—à–µ–Ω–Ω—è:', violationData);

      if (isOnline) {
        // –û–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º - –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä—è–º–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const result = await addViolation(violationData);
        
        if (result?.success) {
          // –Ø–∫—â–æ —î —Ñ–æ—Ç–æ - –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –π–æ–≥–æ –Ω–∞ Cloudinary
          if (formData.photo) {
            try {
              const uploadResult = await uploadPhoto(formData.photo);
              if (uploadResult.success) {
                // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–≤–æ–ø–æ—Ä—É—à–µ–Ω–Ω—è –∑ URL —Ñ–æ—Ç–æ
                // –¶–µ –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º API –≤–∏–∫–ª–∏–∫–æ–º
                console.log('üì∏ –§–æ—Ç–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:', uploadResult.secureUrl);
              }
            } catch (uploadError) {
              console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ:', uploadError);
            }
          }
          
          // –ü–æ–∫–∞–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
          Alert.alert(
            t('violations.addSuccessTitle') || '–£—Å–ø—ñ—Ö',
            t('violations.addSuccessMessage') || '–ü—Ä–∞–≤–æ–ø–æ—Ä—É—à–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ',
            [
              {
                text: t('common.ok') || 'OK',
                onPress: () => {
                  navigation.goBack();
                }
              }
            ],
            { cancelable: false }
          );
        } else {
          const errorMessage = result?.error || t('violations.addErrorMessage') || '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø—Ä–∞–≤–æ–ø–æ—Ä—É—à–µ–Ω–Ω—è';
          console.error('‚ùå [AddViolationScreen] –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è:', errorMessage);
          setFormError(errorMessage);
        }
      } else {
        // –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º - –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ
        const offlineResult = await saveOfflineViolation({
          data: {
            ...violationData,
            photo: formData.photo, // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
          },
          isNew: true,
          synced: false,
        });
        
        if (offlineResult.success) {
          Alert.alert(
            t('violations.offlineSaveTitle') || '–ó–±–µ—Ä–µ–∂–µ–Ω–æ –æ—Ñ–ª–∞–π–Ω',
            t('violations.offlineSaveMessage') || '–ü—Ä–∞–≤–æ–ø–æ—Ä—É—à–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –í–æ–Ω–æ –±—É–¥–µ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–µ –∫–æ–ª–∏ –∑\'—è–≤–∏—Ç—å—Å—è —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç.',
            [
              {
                text: t('common.ok') || 'OK',
                onPress: () => {
                  navigation.goBack();
                }
              }
            ],
            { cancelable: false }
          );
        } else {
          const errorMessage = offlineResult?.error || t('violations.offlineSaveError') || '–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ—Ñ–ª–∞–π–Ω';
          setFormError(errorMessage);
        }
      }
    } catch (error) {
      console.error('üí• [AddViolationScreen] –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
      const errorMessage = t('violations.addErrorMessage') || '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø—Ä–∞–≤–æ–ø–æ—Ä—É—à–µ–Ω–Ω—è';
      setFormError(errorMessage);
    }
  };

  // –û–±—Ä–æ–±–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è - –æ—á–∏—â–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏
  const handleCancel = () => {
    // –Ü–º—ñ—Ç—É—î–º–æ –¥—ñ—é "–Ω–∞–∑–∞–¥" –¥–ª—è –ø–æ–∫–∞–∑—É –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
    setPendingAction({ type: 'GO_BACK' });
    setShowCancelModal(true);
  };

  // –û–±—Ä–æ–±–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è - –æ—á–∏—â–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏
  const handleConfirmCancel = () => {
    setShowCancelModal(false);
    
    // –û—á–∏—â—É—î–º–æ —Ñ–æ—Ä–º—É
    if (formRef.current && formRef.current.resetForm) {
      formRef.current.resetForm();
    }
    
    // –Ø–∫—â–æ —î –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –¥—ñ—è, –≤–∏–∫–æ–Ω—É—î–º–æ —ó—ó
    if (pendingAction) {
      navigation.dispatch(pendingAction);
    } else {
      // –Ü–Ω–∞–∫—à–µ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –Ω–∞–∑–∞–¥
      navigation.goBack();
    }
  };

  // –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–º—ñ–Ω–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
  const handleDismissCancel = () => {
    setShowCancelModal(false);
    setPendingAction(null);
  };

  // –†–µ–Ω–¥–µ—Ä –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
  const renderCancelModal = () => (
    <Modal
      visible={showCancelModal}
      transparent={true}
      animationType="fade"
      onRequestClose={handleDismissCancel}
    >
      <View style={styles.modalOverlay}>
        <View style={[styles.modalContainer, { backgroundColor: colors.background }]}>
          <View style={[styles.modalHeader, { borderBottomColor: colors.border }]}>
            <Text style={[styles.modalTitle, { color: colors.text }]}>
              {t('violations.form.cancelTitle') || '–°–∫–∞—Å—É–≤–∞—Ç–∏ —Ñ–æ—Ä–º—É?'}
            </Text>
          </View>
          
          <View style={styles.modalContent}>
            <Text style={[styles.modalMessage, { color: colors.text }]}>
              {t('violations.form.cancelMessage') || '–í—Å—ñ –≤–Ω–µ—Å–µ–Ω—ñ –∑–º—ñ–Ω–∏ –±—É–¥—É—Ç—å –≤—Ç—Ä–∞—á–µ–Ω—ñ. –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏?'}
            </Text>
            
            <View style={styles.modalActions}>
              <View style={styles.modalButtonWrapper}>
                <TouchableOpacity
                  style={[styles.modalButton, { backgroundColor: colors.card }]}
                  onPress={handleDismissCancel}
                  accessibilityLabel={t('common.no') || "–ù—ñ"}
                >
                  <Text style={[styles.modalButtonText, { color: colors.text }]}>
                    {t('common.no') || "–ù—ñ"}
                  </Text>
                </TouchableOpacity>
              </View>
              <View style={styles.modalButtonWrapper}>
                <TouchableOpacity
                  style={[styles.modalButton, { backgroundColor: colors.primary }]}
                  onPress={handleConfirmCancel}
                  accessibilityLabel={t('common.yes') || "–¢–∞–∫"}
                >
                  <Text style={[styles.modalButtonText, { color: colors.white }]}>
                    {t('common.yes') || "–¢–∞–∫"}
                  </Text>
                </TouchableOpacity>
              </View>
            </View>
          </View>
        </View>
      </View>
    </Modal>
  );

  return (
    <View style={[styles.container, { backgroundColor: colors.background }]}>
      <ViolationForm
        ref={formRef}
        onSubmit={handleSubmit}
        onCancel={handleCancel}
        loading={loading || uploading}
        error={formError || violationsError || cloudinaryError}
        accessibilityLabel={t('violations.form.title') || "–§–æ—Ä–º–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–∞–≤–æ–ø–æ—Ä—É—à–µ–Ω–Ω—è"}
      />
      
      {/* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è */}
      {renderCancelModal()}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  // –°—Ç–∏–ª—ñ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  modalContainer: {
    width: '90%',
    maxWidth: 400,
    borderRadius: 12,
    maxHeight: '80%',
    ...Platform.select({
      ios: {
        shadowColor: 'rgba(0, 0, 0, 0.25)',
        shadowOffset: {
          width: 0,
          height: 10,
        },
        shadowOpacity: 0.5,
        shadowRadius: 20,
      },
      android: {
        elevation: 24,
      },
    }),
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    borderBottomWidth: 1,
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: '600',
    textAlign: 'center',
    flex: 1,
  },
  modalCloseButton: {
    padding: 4,
  },
  modalContent: {
    padding: 16,
  },
  modalMessage: {
    fontSize: 16,
    marginBottom: 20,
    textAlign: 'center',
  },
  modalActions: {
    flexDirection: 'column',
  },
  modalButtonWrapper: {
    marginBottom: 8,
  },
  modalButton: {
    padding: 16,
    borderRadius: 8,
    alignItems: 'center',
  },
  modalButtonText: {
    fontSize: 16,
    fontWeight: '600',
  },
});

export default AddViolationScreen;