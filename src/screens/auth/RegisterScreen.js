// src/screens/auth/RegisterScreen.js
import React, { useRef, useEffect, useState } from 'react';
import {
  View,
  Text,
  ScrollView,
  TouchableOpacity,
  KeyboardAvoidingView,
  Platform,
  StyleSheet,
  SafeAreaView,
  Alert,
  Linking,
} from 'react-native';
import { useNavigation } from '@react-navigation/native';
import * as yup from 'yup';

// Hooks
import { useAuth } from '../../hooks/useAuth';
import { useForm } from '../../hooks/useForm';
import { useThemeColors } from '../../hooks/useTheme';
import { useLanguage } from '../../hooks/useLanguage';

// Common components
import Input from '../../components/common/Input';
import Button from '../../components/common/Button';
import LoadingSpinner from '../../components/common/LoadingSpinner';
import ErrorMessage from '../../components/common/ErrorMessage';
import Icon from 'react-native-vector-icons/MaterialIcons';

const RegisterScreen = () => {
  const navigation = useNavigation();
  const { register: registerUser, loading, error: authError, clearError } = useAuth();
  const { colors, isDark } = useThemeColors();
  const { t } = useLanguage();
  
  // Local state
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [passwordStrength, setPasswordStrength] = useState(0);
  const [error, setError] = useState(null);
  
  // Refs for auto-focus
  const lastNameInputRef = useRef(null);
  const emailInputRef = useRef(null);
  const passwordInputRef = useRef(null);
  const confirmPasswordInputRef = useRef(null);
  
  // Password strength calculation
  const calculatePasswordStrength = (password) => {
    let strength = 0;
    
    if (password.length >= 6) strength += 1;
    if (password.length >= 8) strength += 1;
    if (/[A-Z]/.test(password)) strength += 1;
    if (/[0-9]/.test(password)) strength += 1;
    if (/[^A-Za-z0-9]/.test(password)) strength += 1;
    
    return Math.min(strength, 5);
  };
  
  // Validation schema
  const validationSchema = yup.object().shape({
    firstName: yup
      .string()
      .min(2, t('auth.firstNameMinLength') || '–Ü–º\'—è –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏')
      .required(t('auth.firstNameRequired') || '–Ü–º\'—è –æ–±–æ–≤\'—è–∑–∫–æ–≤–µ'),
    lastName: yup
      .string()
      .min(2, t('auth.lastNameMinLength') || '–ü—Ä—ñ–∑–≤–∏—â–µ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏')
      .required(t('auth.lastNameRequired') || '–ü—Ä—ñ–∑–≤–∏—â–µ –æ–±–æ–≤\'—è–∑–∫–æ–≤–µ'),
    email: yup
      .string()
      .email(t('auth.emailInvalid') || '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email')
      .required(t('auth.emailRequired') || 'Email –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'),
    password: yup
      .string()
      .min(6, t('auth.passwordMinLength') || '–ü–∞—Ä–æ–ª—å –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤')
      .required(t('auth.passwordRequired') || '–ü–∞—Ä–æ–ª—å –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'),
    confirmPassword: yup
      .string()
      .oneOf([yup.ref('password'), null], t('auth.passwordsMustMatch') || '–ü–∞—Ä–æ–ª—ñ –º–∞—é—Ç—å —Å–ø—ñ–≤–ø–∞–¥–∞—Ç–∏')
      .required(t('auth.confirmPasswordRequired') || '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è –æ–±–æ–≤\'—è–∑–∫–æ–≤–µ'),
  });
  
  // Form hooks
  const {
    register,
    handleSubmit,
    errors,
    isValid,
    isSubmitting,
    setError: setFormError,
    clearError: clearFormError,
    setValue,
    values,
  } = useForm(
    {
      firstName: '',
      lastName: '',
      email: '',
      password: '',
      confirmPassword: '',
    },
    validationSchema
  );
  
  // Register form fields
  const firstNameField = register('firstName', {
    required: true,
    minLength: 2,
  });
  
  const lastNameField = register('lastName', {
    required: true,
    minLength: 2,
  });
  
  const emailField = register('email', {
    required: true,
  });
  
  const passwordField = register('password', {
    required: true,
    minLength: 6,
  });
  
  const confirmPasswordField = register('confirmPassword', {
    required: true,
  });
  
  // Update password strength when password changes
  useEffect(() => {
    if (values.password) {
      setPasswordStrength(calculatePasswordStrength(values.password));
    } else {
      setPasswordStrength(0);
    }
  }, [values.password]);
  
  // Auto-focus on first name field
  useEffect(() => {
    setTimeout(() => {
      // Auto-focus handled by Input component
    }, 300);
  }, []);
  
  // Clear errors
  const clearAllErrors = () => {
    setError(null);
    clearError();
    clearFormError();
  };

  const onSubmit = async (data) => {
    console.log('üì§ [RegisterScreen.onSubmit] === –ü–û–ß–ê–¢–û–ö –í–Ü–î–ü–†–ê–í–ö–ò –§–û–†–ú–ò ===');
    console.log('üì§ [RegisterScreen.onSubmit] –î–∞–Ω—ñ –∑ —Ñ–æ—Ä–º–∏:', data);
    
    try {
      clearAllErrors();
      
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
      if (!data.firstName || !data.lastName || !data.email || !data.password) {
        setError('–í—Å—ñ –ø–æ–ª—è –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ');
        return;
      }
      
      // –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
      const registerResult = await registerUser(
        data.firstName,
        data.lastName,
        data.email,
        data.password
      );
      
      console.log('üì• [RegisterScreen.onSubmit] –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:', registerResult);
      
      if (registerResult.success) {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –≤—Ö—ñ–¥ –ø—ñ—Å–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
        console.log('‚úÖ [RegisterScreen.onSubmit] –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞, –≤–∏–∫–æ–Ω—É—é –≤—Ö—ñ–¥...');
        
        // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: –ø–µ—Ä–µ–¥–∞—î–º–æ –æ–±'—î–∫—Ç –∑–∞–º—ñ—Å—Ç—å –æ–∫—Ä–µ–º–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        const loginResult = await login({
          email: data.email,
          password: data.password,
          rememberMe: false // –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ —Ñ–æ—Ä–º–∏, —è–∫—â–æ —î
        });
        
        if (loginResult.success) {
          console.log('üéâ [RegisterScreen.onSubmit] –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –≤—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π');
          // –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –µ–∫—Ä–∞–Ω—É
          navigation.reset({
            index: 0,
            routes: [{ name: 'MainTabs' }],
          });
        } else {
          // –Ø–∫—â–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –≤—Ö—ñ–¥ –Ω–µ –≤–¥–∞–≤—Å—è, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ Login
          console.log('‚ö†Ô∏è [RegisterScreen.onSubmit] –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –≤—Ö—ñ–¥ –Ω–µ –≤–¥–∞–≤—Å—è, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ Login');
          navigation.navigate('Login');
        }
      } else {
        // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
        if (registerResult.error?.toLowerCase().includes('email')) {
          setFormError('email', t('auth.emailExists') || '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email –≤–∂–µ —ñ—Å–Ω—É—î');
        } else {
          setError(registerResult.error || t('auth.registrationFailed') || '–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó');
        }
      }
    } catch (err) {
      console.error('üí• [RegisterScreen.onSubmit] –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê:', err);
      setError(t('auth.registrationFailed') || '–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó');
    }
  };
  // Handle login navigation
  const handleLogin = () => {
    navigation.navigate('Login');
  };
  
  // Handle error dismissal
  const handleDismissError = () => {
    clearAllErrors();
  };
  
  // Toggle password visibility
  const togglePasswordVisibility = () => {
    setShowPassword(!showPassword);
  };
  
  const toggleConfirmPasswordVisibility = () => {
    setShowConfirmPassword(!showConfirmPassword);
  };
  
  // Get password strength label
  const getPasswordStrengthLabel = () => {
    switch (passwordStrength) {
      case 0: return t('auth.passwordStrength0') || '–î—É–∂–µ —Å–ª–∞–±–∫–∏–π';
      case 1: return t('auth.passwordStrength1') || '–°–ª–∞–±–∫–∏–π';
      case 2: return t('auth.passwordStrength2') || '–°–µ—Ä–µ–¥–Ω—ñ–π';
      case 3: return t('auth.passwordStrength3') || '–ù–∞–¥—ñ–π–Ω–∏–π';
      case 4: return t('auth.passwordStrength4') || '–î—É–∂–µ –Ω–∞–¥—ñ–π–Ω–∏–π';
      case 5: return t('auth.passwordStrength5') || '–ù–∞–π–∫—Ä–∞—â–∏–π';
      default: return '';
    }
  };
  
  // Get password strength color
  const getPasswordStrengthColor = () => {
    switch (passwordStrength) {
      case 0: case 1: return colors.error;
      case 2: return colors.warning;
      case 3: case 4: return colors.success;
      case 5: return '#34C759';
      default: return colors.border;
    }
  };
  
  // Combine errors from different sources
  const combinedError = error || authError || errors.general;
  
  // –î–æ–¥–∞—Ç–∫–æ–≤–µ –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
  useEffect(() => {
    console.log('üìä [RegisterScreen] –ü–æ—Ç–æ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏:', values);
  }, [values]);
  
  return (
    <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>
      <KeyboardAvoidingView
        style={styles.keyboardAvoidingView}
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        keyboardVerticalOffset={Platform.OS === 'ios' ? 64 : 0}
      >
        <ScrollView
          contentContainerStyle={styles.scrollContent}
          keyboardShouldPersistTaps="handled"
          showsVerticalScrollIndicator={false}
        >
          {/* Header */}
          <View style={styles.header}>
            <View style={styles.logoContainer}>
              <Text style={[styles.logo, { color: colors.primary }]}>üõ°Ô∏è</Text>
            </View>
            <Text style={[styles.title, { color: colors.text }]}>
              {t('auth.register')}
            </Text>
            <Text style={[styles.subtitle, { color: colors.textSecondary }]}>
              {t('auth.registerSubtitle') || '–°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å'}
            </Text>
          </View>
          
          {/* Error message */}
          <ErrorMessage
            message={combinedError}
            visible={!!combinedError}
            type="error"
            onDismiss={handleDismissError}
            style={styles.errorMessage}
            accessibilityLabel={combinedError}
          />
          
          {/* Registration form */}
          <View style={[styles.form, { backgroundColor: colors.card }]}>
            {/* First Name input */}
            <Input
              label={t('auth.firstName') || '–Ü–º\'—è'}
              placeholder={t('auth.firstNamePlaceholder') || '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º\'—è'}
              value={firstNameField.value}
              onChangeText={firstNameField.onChangeText || firstNameField.onChange}
              onBlur={firstNameField.onBlur}
              autoCapitalize="words"
              returnKeyType="next"
              onSubmitEditing={() => lastNameInputRef.current?.focus()}
              showError={!!errors.firstName}
              errorText={errors.firstName}
              style={styles.input}
              accessibilityLabel={t('auth.firstName') || '–Ü–º\'—è'}
              accessibilityHint={t('auth.firstNameHint') || '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º\'—è'}
            />
            
            {/* Last Name input */}
            <Input
              ref={lastNameInputRef}
              label={t('auth.lastName') || '–ü—Ä—ñ–∑–≤–∏—â–µ'}
              placeholder={t('auth.lastNamePlaceholder') || '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ'}
              value={lastNameField.value}
              onChangeText={lastNameField.onChangeText || lastNameField.onChange}
              onBlur={lastNameField.onBlur}
              autoCapitalize="words"
              returnKeyType="next"
              onSubmitEditing={() => emailInputRef.current?.focus()}
              showError={!!errors.lastName}
              errorText={errors.lastName}
              style={styles.input}
              accessibilityLabel={t('auth.lastName') || '–ü—Ä—ñ–∑–≤–∏—â–µ'}
              accessibilityHint={t('auth.lastNameHint') || '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ'}
            />
            
            {/* Email input */}
            <Input
              ref={emailInputRef}
              label={t('auth.email') || 'Email'}
              placeholder={t('auth.emailPlaceholder') || '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à email'}
              value={emailField.value}
              onChangeText={emailField.onChangeText || emailField.onChange}
              onBlur={emailField.onBlur}
              keyboardType="email-address"
              autoCapitalize="none"
              autoCorrect={false}
              returnKeyType="next"
              onSubmitEditing={() => passwordInputRef.current?.focus()}
              showError={!!errors.email}
              errorText={errors.email}
              style={styles.input}
              accessibilityLabel={t('auth.email') || 'Email'}
              accessibilityHint={t('auth.emailHint') || '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à email –∞–¥—Ä–µ—Å'}
            />
            
            {/* Password input */}
            <Input
              ref={passwordInputRef}
              label={t('auth.password') || '–ü–∞—Ä–æ–ª—å'}
              placeholder={t('auth.passwordPlaceholder') || '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –ø–∞—Ä–æ–ª—å'}
              value={passwordField.value}
              onChangeText={(text) => {
                passwordField.onChangeText ? passwordField.onChangeText(text) : passwordField.onChange(text);
                setValue('password', text);
              }}
              onBlur={passwordField.onBlur}
              secureTextEntry={!showPassword}
              autoCapitalize="none"
              autoCorrect={false}
              returnKeyType="next"
              onSubmitEditing={() => confirmPasswordInputRef.current?.focus()}
              showError={!!errors.password}
              errorText={errors.password}
              iconRight={
                <TouchableOpacity onPress={togglePasswordVisibility}>
                  <Icon 
                    name={showPassword ? "visibility-off" : "visibility"} 
                    size={24} 
                    color={colors.textSecondary} 
                  />
                </TouchableOpacity>
              }
              style={styles.input}
              accessibilityLabel={t('auth.password') || '–ü–∞—Ä–æ–ª—å'}
              accessibilityHint={t('auth.passwordHint') || '–í–≤–µ–¥—ñ—Ç—å –Ω–∞–¥—ñ–π–Ω–∏–π –ø–∞—Ä–æ–ª—å'}
            />
            
            {/* Password strength indicator */}
            {values.password.length > 0 && (
              <View style={styles.passwordStrengthContainer}>
                <View style={styles.passwordStrengthBar}>
                  {[...Array(5)].map((_, index) => (
                    <View
                      key={index}
                      style={[
                        styles.passwordStrengthSegment,
                        {
                          backgroundColor: index < passwordStrength 
                            ? getPasswordStrengthColor() 
                            : colors.border,
                        },
                      ]}
                    />
                  ))}
                </View>
                <Text style={[styles.passwordStrengthText, { color: getPasswordStrengthColor() }]}>
                  {getPasswordStrengthLabel()}
                </Text>
              </View>
            )}
            
            {/* Confirm Password input */}
            <Input
              ref={confirmPasswordInputRef}
              label={t('auth.confirmPassword') || '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è'}
              placeholder={t('auth.confirmPasswordPlaceholder') || '–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å —â–µ —Ä–∞–∑'}
              value={confirmPasswordField.value}
              onChangeText={confirmPasswordField.onChangeText || confirmPasswordField.onChange}
              onBlur={confirmPasswordField.onBlur}
              secureTextEntry={!showConfirmPassword}
              autoCapitalize="none"
              autoCorrect={false}
              returnKeyType="done"
              onSubmitEditing={handleSubmit(onSubmit)}
              showError={!!errors.confirmPassword}
              errorText={errors.confirmPassword}
              iconRight={
                <TouchableOpacity onPress={toggleConfirmPasswordVisibility}>
                  <Icon 
                    name={showConfirmPassword ? "visibility-off" : "visibility"} 
                    size={24} 
                    color={colors.textSecondary} 
                  />
                </TouchableOpacity>
              }
              style={styles.input}
              accessibilityLabel={t('auth.confirmPassword') || '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è'}
              accessibilityHint={t('auth.confirmPasswordHint') || '–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å —â–µ —Ä–∞–∑ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è'}
            />
            
            {/* Register button */}
            <Button
              title={t('auth.registerButton') || '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è'}
              onPress={handleSubmit(onSubmit)}
              variant="primary"
              size="large"
              loading={loading || isSubmitting}
              disabled={loading || isSubmitting || !isValid}
              style={styles.registerButton}
              accessibilityLabel={t('auth.registerButton') || '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è'}
              accessibilityRole="button"
              accessibilityState={{ disabled: loading || isSubmitting || !isValid }}
            />
          </View>
          
          {/* Login link */}
          <View style={styles.loginContainer}>
            <Text style={[styles.loginText, { color: colors.textSecondary }]}>
              {t('auth.hasAccount') || '–í–∂–µ –º–∞—î—Ç–µ –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å?'}{' '}
            </Text>
            <TouchableOpacity
              onPress={handleLogin}
              accessibilityLabel={t('auth.login') || '–£–≤—ñ–π—Ç–∏'}
              accessibilityRole="button"
            >
              <Text style={[styles.loginLink, { color: colors.primary }]}>
                {t('auth.login') || '–£–≤—ñ–π—Ç–∏'}
              </Text>
            </TouchableOpacity>
          </View>
          
          {/* Terms and Privacy */}
          <View style={styles.termsContainer}>
            <Text style={[styles.termsText, { color: colors.textSecondary }]}>
              {t('auth.byRegistering') || '–†–µ—î—Å—Ç—Ä—É—é—á–∏—Å—å, –≤–∏ –ø–æ–≥–æ–¥–∂—É—î—Ç–µ—Å—å –∑'}{' '}
            </Text>
            <TouchableOpacity onPress={() => Linking.openURL('https://example.com/terms')}>
              <Text style={[styles.termsLink, { color: colors.primary }]}>
                {t('auth.terms') || '–£–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è'}
              </Text>
            </TouchableOpacity>
            <Text style={[styles.termsText, { color: colors.textSecondary }]}>
              {' '}{t('auth.and') || '—Ç–∞'}{' '}
            </Text>
            <TouchableOpacity onPress={() => Linking.openURL('https://example.com/privacy')}>
              <Text style={[styles.termsLink, { color: colors.primary }]}>
                {t('auth.privacy') || '–ü–æ–ª—ñ—Ç–∏–∫–æ—é –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ'}
              </Text>
            </TouchableOpacity>
          </View>
        </ScrollView>
        
        {/* Loading overlay */}
        <LoadingSpinner
          visible={loading || isSubmitting}
          overlay={true}
          text={t('auth.registering') || '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è...'}
          accessibilityLabel={t('auth.registering') || '–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è'}
        />
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  keyboardAvoidingView: {
    flex: 1,
  },
  scrollContent: {
    flexGrow: 1,
    justifyContent: 'center',
    padding: 20,
  },
  header: {
    alignItems: 'center',
    marginBottom: 32,
  },
  logoContainer: {
    marginBottom: 16,
  },
  logo: {
    fontSize: 64,
  },
  title: {
    fontSize: 32,
    fontWeight: '700',
    marginBottom: 12,
  },
  subtitle: {
    fontSize: 16,
    textAlign: 'center',
  },
  errorMessage: {
    marginBottom: 16,
  },
  form: {
    borderRadius: 16,
    padding: 24,
    marginBottom: 24,
    ...Platform.select({
      ios: {
        shadowColor: 'rgba(0, 0, 0, 0.1)',
        shadowOffset: {
          width: 0,
          height: 4,
        },
        shadowOpacity: 0.8,
        shadowRadius: 8,
      },
      android: {
        elevation: 4,
      },
    }),
  },
  input: {
    marginBottom: 20,
  },
  passwordStrengthContainer: {
    marginBottom: 20,
  },
  passwordStrengthBar: {
    flexDirection: 'row',
    height: 4,
    marginBottom: 8,
  },
  passwordStrengthSegment: {
    flex: 1,
    marginHorizontal: 2,
    borderRadius: 2,
  },
  passwordStrengthText: {
    fontSize: 12,
    fontWeight: '500',
  },
  registerButton: {
    marginTop: 8,
  },
  loginContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 24,
  },
  loginText: {
    fontSize: 16,
  },
  loginLink: {
    fontSize: 16,
    fontWeight: '600',
  },
  termsContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'center',
    alignItems: 'center',
  },
  termsText: {
    fontSize: 14,
    textAlign: 'center',
  },
  termsLink: {
    fontSize: 14,
    fontWeight: '600',
  },
});

export default RegisterScreen;